{%- macro comment_examples(attribute, prefix) -%}
    {% if attribute.examples %}
        {% if attribute.examples is sequence %}
{{ prefix }}
{{ prefix }} ## Examples:
            {% for example in attribute.examples %}
{{ example | comment_with_prefix(prefix ~ " - ") }}
            {% endfor %}
        {% else %}
{{ prefix }}
{{ prefix }} Example: {{ attribute.examples | trim }}
        {% endif %}
    {% endif %}
{% endmacro %}

{%- macro attributes_to_key_values(required_attributes, not_required_attributes) -%}
        let mut attributes = vec![
            {% for attribute in required_attributes | attribute_sort %}
            {% if attribute is experimental %}
            #[cfg(feature = "semconv_experimental")]
            {% endif %}
            {% if attribute.type.members is defined %}
            crate::attributes::{{ attribute.name | attribute_namespace }}::{{ attribute.name | screaming_snake_case }}.value(&required_attributes.{{ attribute.name | snake_case }}),
            {% elif attribute.type == "string" %}
            crate::attributes::{{ attribute.name | attribute_namespace }}::{{ attribute.name | screaming_snake_case }}.value(required_attributes.{{ attribute.name | snake_case }}.to_owned().into()),
            {% else %}
            crate::attributes::{{ attribute.name | attribute_namespace }}::{{ attribute.name | screaming_snake_case }}.value(required_attributes.{{ attribute.name | snake_case }}),
            {% endif %}
            {% endfor %}
        ];

        if let Some(value) = &not_required_attributes {
            {% for attribute in not_required_attributes | attribute_sort %}
            {% if attribute is experimental %}
            #[cfg(feature = "semconv_experimental")]
            {% endif %}
            {% if attribute.type.members is defined %}
            if let Some({{ attribute.name | snake_case }}) = &value.{{ attribute.name | snake_case }} {
                attributes.push(crate::attributes::{{ attribute.name | attribute_namespace }}::{{ attribute.name | screaming_snake_case }}.value({{ attribute.name | snake_case }}));
            }
            {% elif attribute.type == "string" %}
            if let Some({{ attribute.name | snake_case }}) = &value.{{ attribute.name | snake_case }} {
                attributes.push(crate::attributes::{{ attribute.name | attribute_namespace }}::{{ attribute.name | screaming_snake_case }}.value({{ attribute.name | snake_case }}.to_owned().into()));
            }
            {% else %}
            if let Some({{ attribute.name | snake_case }}) = value.{{ attribute.name | snake_case }} {
                attributes.push(crate::attributes::{{ attribute.name | attribute_namespace }}::{{ attribute.name | screaming_snake_case }}.value({{ attribute.name | snake_case }}));
            }
            {% endif %}
            {% endfor %}
        }
{%- endmacro %}